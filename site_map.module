<?php

/**
 * @file
 * site_map.module
 *
 * Original author: Nic Ivy
 * Now maintained by Fredrik Jonsson fredrik at combonet dot se
 */

use Drupal\Component\Utility\String;
use \Drupal\Core\Template\Attribute;

/**
 * Implements hook_permission().
 */
function site_map_permission() {
  return array(
    'access site map' => array(
      'title' => t('View published site map'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function site_map_theme() {
  return array(
    'site_map' => array(
      'variables' => array(),
      'template' => 'site-map',
    ),
    'site_map_box' => array(
      'variables' => array(
        'title' => NULL,
        'content' => NULL,
        'attributes' => array(),
      ),
    ),
    'site_map_feed_icon' => array(
      'variables' => array(
        'url' => NULL,
        'type' => 'node',
      ),
    ),
    'site_map_menu_link' => array(
      'render element' => 'element',
    ),
    'site_map_menu_tree' => array(
      'render element' => 'tree',
    ),
    'site_map_rss_legend' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Returns HTML for a site map feed icon legend.
 */
function theme_site_map_rss_legend() {
  $output .= '<p><strong>' . t('Legend:') . '</strong><br />';
  $feed_icon_node = array(
    '#theme' => 'site_map_feed_icon',
    '#type' => 'node'
  );
  $output .= '<span class="rss">' . drupal_render($feed_icon_node) . '</span> ' . t('Link to a content RSS feed');
  $feed_icon_comment = array(
    '#theme' => 'site_map_feed_icon',
    '#type' => 'comment'
  );
  $output .= '<br /><span class="rss">' . drupal_render($feed_icon_comment) . '</span> ' . t('Link to a comment RSS feed');
  $output .= '</p>';

  return $output;
}

/**
 * Preprocesses the variables for theme_site_map_box().
 */
function template_preprocess_site_map_box(&$variables) {
  $variables['attributes']['class'][] = 'site-map-box';
}

/**
 * Returns HTML for a themed site map box.
 *
 * @param array $variables
 *   An associative array containing:
 *   - title: The subject of the box.
 *   - content: The content of the box.
 *   - attributes:  Optional attributes for the box.
 *
 * @return string
 *   Returns sitemap display in DIV.
 */
function theme_site_map_box($variables) {
  $title = $variables['title'];
  $content = $variables['content'];
  $attributes = $variables['attributes'];
  $options = $variables['options'];

  $output = '';
  if (!empty($title) || !empty($content)) {
    $output .= '<div' . new Attribute($attributes) . '>';
    if (!empty($title) && isset($options['show_titles'])) {
      $output .= '<h2 class="title">' . $title . '</h2>';
    }
    if (!empty($content)) {
      $output .= '<div class="content">' . $content . '</div>';
    }
    $output .= '</div>';
  }

  return $output;
}

/**
 * Returns HTML for a feed icon with link.
 *
 * @param array $variables
 *   An associative array containing:
 *   - url: The url of the feed.
 *   - type: The type of feed icon.
 *
 * @return string
 *   Constructs and returns html with feed image icon.
 */
function theme_site_map_feed_icon($variables) {
  $output = '';

  switch ($variables['type']) {
    case 'node':
      $image = array(
        '#theme' => 'image',
        '#path' => drupal_get_path('module', 'site_map') . '/images/feed-small.png',
        '#title' => t('Syndicate content'),
        '#alt' => t('Syndicate content'),
      );
      $output = drupal_render($image);
      break;

    case 'comment':
      $image = array(
        '#theme' => 'image',
        '#path' => drupal_get_path('module', 'site_map') . '/images/feed-small-comment.png',
        '#title' => t('Syndicate content'),
        '#alt' => t('Syndicate content'),
      );
      $output = drupal_render($image);
      break;
  }

  if (!empty($variables['url'])) {
    $output = l($output, $variables['url'], array('attributes' => array('class' => 'feed-link'), 'html' => TRUE));
  }

  return $output;
}

/**
 * Preprocesses the rendered tree for theme_site_map_menu_tree().
 *
 * This is a clone of the core template_preprocess_menu_tree() function
 * with the exception of the site_map specific class name used in the
 * UL that also allow themers to override the function only
 * for the site map page.
 */
function template_preprocess_site_map_menu_tree(&$variables) {
  $variables['tree'] = $variables['tree']['#children'];
}

/**
 * Returns HTML for a wrapper for a menu sub-tree.
 *
 * This is a clone of the core theme_menu_tree() function with the exception of
 * the site_map specific class name used in the UL that also allow themers to
 * override the function only for the site map page.
 *
 * @param array $variables
 *   An associative array containing:
 *   - tree: An HTML string containing the tree's items.
 *
 * @return string
 *   Returns the html string with the <ul> for the menu tree.
 *
 * @see template_preprocess_menu_tree()
 * @ingroup themeable
 */
function theme_site_map_menu_tree($variables) {
  return '<ul class="site-map-menu">' . $variables['tree'] . '</ul>';
}

/**
 * Returns HTML for a menu link and submenu.
 *
 * This is a one by one clone of the core theme_menu_link() function that allows
 * custom theming of the site map page items.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: Structured array data for a menu link.
 *
 * @return string
 *   Returns html string for menu link.
 *
 * @ingroup themeable
 */
function theme_site_map_menu_link(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Preprocesses the variables for site-map.tpl.php.
 *
 * @see site-map.tpl.php
 */
function template_preprocess_site_map(&$variables) {
  $config = \Drupal::config('site_map.settings');

  $message = $config->get('site_map_message.value');
  if (!empty($message)) {
    $variables['message'] = String::checkPlain($message, $config->get('site_map_message.format'));
  }

  if (($config->get('site_map_show_rss_links') != 0) && \Drupal::service('module_handler')->moduleExists('commentrss') && \Drupal::config('commentrss.settings')->get('commentrss_site')) {
    $rss_legend = array(
      '#theme' => 'site_map_rss_legend'
    );
    $variables['rss_legend'] = drupal_render($rss_legend);
  }

  if ($config->get('site_map_show_front')) {
    $variables['front_page'] = _site_map_front_page();
  }

  if ($config->get('site_map_show_titles')) {
    $variables['show_titles'] = TRUE;
  }

  if ($config->get('site_map_show_blogs')) {
    $variables['blogs'] = _site_map_blogs();
  }

  // Compile the books trees.
  $variables['books'] = _site_map_books();

  // Compile the menu trees.
  $variables['menus'] = _site_map_menus();

  if ($config->get('site_map_show_faq')) {
    $variables['faq'] = _site_map_faq();
  }

  // Compile the vocabulary trees.
  $variables['taxonomys'] = \Drupal::service('site_map.helper')->getTaxonomys();

  // Invoke all custom modules and integrate themed HTML into the site map.
  $additional = \Drupal::service('module_handler')->invokeAll('site_map');
  foreach ($additional as $themed_site_map_code) {
    $variables['additional'] .= $themed_site_map_code;
  }
}

/**
 * Menu callback for the site map front page.
 *
 * @return string
 *   Returns HTML string for front page site map.
 */
function _site_map_front_page() {
  $config = \Drupal::config('site_map.settings');
  $output = '';
  $class = array();
  $options = array();
  $title = t('Front page');
  $output = l(t('Front page of %sn', array('%sn' => \Drupal::config('system.site')->get('name'))), '<front>', array('html' => TRUE));

  if ($config->get('site_map_show_rss_links') != 0) {
    $feed_icon = array(
      '#theme' => 'site_map_feed_icon',
      '#url' => $config->get('site_map_rss_front')
    );
    $rss_link = drupal_render($feed_icon);
    if (\Drupal::service('module_handler')->moduleExists('commentrss') && \Drupal::config('commentrss.settings')->get('commentrss_site')) {
      $feed_icon = array(
        '#theme' => 'site_map_feed_icon',
        '#url' => 'crss',
        '#type' => 'comment'
      );
      $rss_link .= ' ' . drupal_render($feed_icon);
    }
    if ($config->get('site_map_show_rss_links') == 1) {
      $output .= ' ' . $rss_link;
    }
    else {
      $class[] = 'site-map-rss-left';
      $output = $rss_link . ' ' . $output;
    }
  }
  \Drupal::service('site_map.helper')->setOption($options, 'site_map_show_titles', 1, 1, 'show_titles', TRUE);

  $class[] = 'site-map-box-front';
  $attributes = array('class' => $class);

  $site_map_box = array(
    '#theme' => 'site_map_box',
    '#title' => $title,
    '#content' => $output,
    '#attributes' => $attributes,
    '#options' => $options,
  );
  return drupal_render($site_map_box);
}

/**
 * Render the latest blogs.
 *
 * @return string
 *   Returns HTML string of site map for blogs.
 */
function _site_map_blogs() {
  $config = \Drupal::config('site_map.settings');
  $output = '';
  $class = array();
  $options = array();
  if (\Drupal::service('module_handler')->moduleExists('blog')) {
    $title = t('Blogs');
    $output = '<div class="description">' . t('Community blog and recent blog authors at %sn.', array('%sn' => \Drupal::config('system.site')->get('name'))) . '</div>';

    $blog_link = l(t('All blogs'), 'blog');
    if ($config->get('site_map_show_rss_links') != 0) {
      $feed_icon = array(
        '#theme' => 'site_map_feed_icon',
        '#url' => 'blog/feed'
      );
      $rss_link = drupal_render($feed_icon);
      if ($config->get('site_map_show_rss_links') == 1) {
        $blog_link .= ' ' . $rss_link;
      }
      else {
        $class[] = 'site-map-rss-left';
        $blog_link = $rss_link . ' ' . $blog_link;
      }
    }
    \Drupal::service('site_map.helper')->setOption($options, 'site_map_show_titles', 1, 1, 'show_titles', TRUE);

    $blogs = array();
    $blogs[] = $blog_link;

    $sql = "SELECT DISTINCT u.uid, u.name, count(u.uid) AS numitems
      FROM {node} n
      INNER JOIN {users} u ON u.uid = n.uid
      WHERE n.type = 'blog' AND n.status = 1
      GROUP BY u.uid, u.name
      ORDER BY numitems DESC, u.name";
    $result = db_query_range($sql, 0, 10);
    foreach ($result as $blog) {
      $blog_item = t('<a href="@url">@name\'s blog</a> (@num_items)', array(
        '@url' => "blog/$blog->uid",
        '@name' => $blog->name,
        '@num_items' => $blog->numitems,
      ));
      if ($config->get('site_map_show_rss_links') != 0) {
        $feed_icon = array(
          '#theme' => 'site_map_feed_icon',
          '#url' => "blog/$blog->uid/feed"
        );
        $rss_link = drupal_render($feed_icon);
        if ($config->get('site_map_show_rss_links') == 1) {
          $blog_item .= ' ' . $rss_link;
        }
        else {
          $blog_item = $rss_link . ' ' . $blog_item;
        }
      }
      $blogs[] = $blog_item;
    }

    $class[] = 'site-map-box-blog';
    $attributes = array('class' => $class);

    $blog_list = array(
      '#theme' => 'item_list',
      '#items' => $blogs
    );
    $output .= drupal_render($blog_list);

    $site_map_box = array(
      '#theme' => 'site_map_box',
      '#title' => $title,
      '#content' => $output,
      '#attributes' => $attributes,
      '#options' => $options,
    );
    $output = drupal_render($site_map_box);
  }

  return $output;
}

/**
 * Render the latest maps for audio.
 *
 * @return string
 *   Returns HTML string of site map for audio.
 */
function _site_map_audio() {
  $config = \Drupal::config('site_map.settings');
  $output = '';
  $class = array();
  $options = array();
  if (\Drupal::service('module_handler')->moduleExists('audio')) {
    $title = t('Audio');
    $output = l(t('Audio content'), 'audio');
    if ($config->get('site_map_show_rss_links') != 0) {
      $feed_icon = array(
        '#theme' => 'site_map_feed_icon',
        '#url' => 'audio/feed'
      );
      $rss_link = drupal_render($feed_icon);
      if ($config->get('site_map_show_rss_links') == 1) {
        $output .= ' ' . $rss_link;
      }
      else {
        $class[] = 'site-map-rss-left';
        $output = $rss_link . ' ' . $output;
      }
    }
    \Drupal::service('site_map.helper')->setOption($options, 'site_map_show_titles', 1, 1, 'show_titles', TRUE);

    $class[] = 'site-map-box-audio';
    $attributes = array('class' => $class);

    $site_map_box = array(
      '#theme' => 'site_map_box',
      '#title' => $title,
      '#content' => $output,
      '#attributes' => $attributes,
      '#options' => $options,
    );
    $output = drupal_render($site_map_box);
  }

  return $output;
}

/**
 * Render the latest maps for video.
 *
 * @return string
 *   Returns HTML string of site map for video.
 */
function _site_map_video() {
  $config = \Drupal::config('site_map.settings');
  $output = '';
  $class = array();
  $options = array();
  if (\Drupal::service('module_handler')->moduleExists('video')) {
    $title = t('Video');
    $output = l(t('Video content'), 'video');
    if ($config->get('site_map_show_rss_links') != 0) {
      $feed_icon = array(
        '#theme' => 'site_map_feed_icon',
        '#url' => 'video/feed'
      );
      $rss_link = drupal_render($feed_icon);
      if ($config->get('site_map_show_rss_links') == 1) {
        $output .= ' ' . $rss_link;
      }
      else {
        $class[] = 'site-map-rss-left';
        $output = $rss_link . '  ' . $output;
      }
    }
    \Drupal::service('site_map.helper')->setOption($options, 'site_map_show_titles', 1, 1, 'show_titles', TRUE);

    $class[] = 'site-map-box-video';
    $attributes = array('class' => $class);

    $site_map_box = array(
      '#theme' => 'site_map_box',
      '#title' => $title,
      '#content' => $output,
      '#attributes' => $attributes,
      '#options' => $options,
    );
    $output = drupal_render($site_map_box);
  }

  return $output;
}

/**
 * Render the latest maps for books.
 *
 * @return string
 *   Returns HTML string of site map for video.
 */
function _site_map_books() {
  $config = \Drupal::config('site_map.settings');
  $output = '';
  $options = array();
  $book_titles = array();
  $mlid = array_filter($config->get('site_map_show_books'));

  if (\Drupal::service('module_handler')->moduleExists('book') && !empty($mlid)) {
    $books_expanded = $config->get('site_map_books_expanded');
    $title = t('Books');
    $description = '<div class="description">' . t('Books at %sn.', array('%sn' => \Drupal::config('system.site')->get('name'))) . '</div>';

    foreach (book_get_books() as $book_id => $book) {
      if (in_array($book['mlid'], $mlid)) {
        // Use menu_tree_all_data to retrieve the expanded tree.
        $tree = menu_tree_all_data($book['menu_name']);
        if (\Drupal::service('module_handler')->moduleExists('i18n_menu')) {
          $tree = i18n_menu_localize_tree($tree, $GLOBALS['language']->language);
        }
        if ($books_expanded) {
          $tree_output = _site_map_menu_tree_output($tree);
          $output .= drupal_render($tree_output);
        }
        else {
          $data = array_shift($tree);
          $book_title = array(
            '#theme' => 'book_title_link',
            '#link' => $data['link']
          );
          $book_titles[] = drupal_render($book_title);
        }
      }
    }
    \Drupal::service('site_map.helper')->setOption($options, 'site_map_show_titles', 1, 1, 'show_titles', TRUE);

    if (!$books_expanded && !empty($book_titles)) {
      $book_titles = array(
        '#theme' => 'item_list',
        '#items' => $book_titles
      );
      $output .= drupal_render($book_titles);
    }

    if (!empty($output)) {
      $attributes = array('class' => array('site-map-box-book'));

      $site_map_box = array(
        '#theme' => 'site_map_box',
        '#title' => $title,
        '#content' => $description . $output,
        '#attributes' => $attributes,
        '#options' => $options,
      );
      $output = drupal_render($site_map_box);
    }
  }

  return $output;
}

/**
 * Render the latest maps for all the menus.
 *
 * @return string
 *   Returns HTML string of site map for menus.
 */
function _site_map_menus() {
  $config = \Drupal::config('site_map.settings');
  $output = '';
  $class = array();
  $options = array();
  $mids = array_filter($config->get('site_map_show_menus'));

  if (!empty($mids)) {
    foreach ($mids as $mid) {
      $menu = menu_load($mid);
      // Use menu_tree_all_data to retrieve the expanded tree.
      $tree = menu_tree_all_data($mid);
      if (\Drupal::service('module_handler')->moduleExists('i18n_menu')) {
        $tree = i18n_menu_localize_tree($tree, $GLOBALS['language']->language);
      }
      $menu_display = _site_map_menu_tree_output($tree);
      $menu_html = drupal_render($menu_display);
      if (!empty($menu_html)) {
        $title = t($menu['title']);
        if (\Drupal::service('module_handler')->moduleExists('i18n_string')) {
          $m_array = array('menu', 'menu', $menu['menu_name'], 'title');
          $title = i18n_string_plain($m_array, $title);
        }
        \Drupal::service('site_map.helper')->setOption($options, 'site_map_show_titles', 1, 1, 'show_titles', TRUE);

        $class[] = 'site-map-box-menu';
        $class[] = 'site-map-box-menu-' . $mid;
        $attributes = array('class' => $class);

        $site_map_box = array(
          '#theme' => 'site_map_box',
          '#title' => $title,
          '#content' => $menu_html,
          '#attributes' => $attributes,
          '#options' => $options,
        );
        $output .= drupal_render($site_map_box);
      }
    }
  }

  return $output;
}

/**
 * Render the latest maps for faq.
 *
 * @return string
 *   Returns HTML string of site map for faq.
 */
function _site_map_faq() {
  $output = '';
  $options = array();
  if (\Drupal::service('module_handler')->moduleExists('faq')) {
    $title = \Drupal::config('faq.settings')->get('faq_title');
    $attributes = array('class' => array('site-map-box-faq'));
    $output = faq_get_faq_list();
    \Drupal::service('site_map.helper')->setOption($options, 'site_map_show_titles', 1, 1, 'show_titles', TRUE);

    $site_map_box = array(
      '#theme' => 'site_map_box',
      '#title' => $title,
      '#content' => $output,
      '#attributes' => $attributes,
      '#options' => $options,
    );
    $output = drupal_render($site_map_box);
  }

  return $output;
}

/**
 * Returns a rendered menu tree.
 *
 * This is a clone of the core menu_tree_output() function with the exception
 * of theme('site_map_menu_tree') for theming override reasons.
 *
 * The menu item's LI element is given one of the following classes:
 * - expanded: The menu item is showing its submenu.
 * - collapsed: The menu item has a submenu which is not shown.
 * - leaf: The menu item has no submenu.
 *
 * @param array $tree
 *   A data structure representing the tree as returned from menu_tree_data.
 *
 * @return array
 *   A structured array to be rendered by drupal_render().
 */
function _site_map_menu_tree_output($tree) {
  $config = \Drupal::config('site_map.settings');
  $build = array();
  $items = array();

  // Pull out just the menu links we are going to render so that we
  // get an accurate count for the first/last classes.
  // Thanks for fix by zhuber at https://drupal.org/node/1331104#comment-5200266
  foreach ($tree as $data) {
    if ($data['link']['access'] && (!$data['link']['hidden'] || $config->get('site_map_show_menus_hidden'))) {
      $items[] = $data;
    }
  }

  $router_item = menu_get_item();
  $num_items = count($items);
  foreach ($items as $i => $data) {
    $class = array();
    if ($i == 0) {
      $class[] = 'first';
    }
    if ($i == $num_items - 1) {
      $class[] = 'last';
    }
    // Set a class for the <li>-tag. Since $data['below'] may contain local
    // tasks, only set 'expanded' class if the link also has children within
    // the current menu.
    if ($data['link']['has_children'] && $data['below']) {
      $class[] = 'expanded';
    }
    elseif ($data['link']['has_children']) {
      $class[] = 'collapsed';
    }
    else {
      $class[] = 'leaf';
    }
    // Set a class if the link is in the active trail.
    if ($data['link']['in_active_trail']) {
      $class[] = 'active-trail';
      $data['link']['localized_options']['attributes']['class'][] = 'active-trail';
    }
    // Normally, l() compares the href of every link with $_GET['q'] and sets
    // the active class accordingly. But local tasks do not appear in menu
    // trees, so if the current path is a local task, and this link is its
    // tab root, then we have to set the class manually.
    if ($data['link']['href'] == $router_item['tab_root_href'] && $data['link']['href'] != $_GET['q']) {
      $data['link']['localized_options']['attributes']['class'][] = 'active';
    }

    // Allow menu-specific theme overrides.
    $element['#theme'] = 'site_map_menu_link__' . strtr($data['link']['menu_name'], '-', '_');
    $element['#attributes']['class'] = $class;
    $element['#title'] = $data['link']['title'];
    $element['#href'] = $data['link']['href'];
    $element['#localized_options'] = !empty($data['link']['localized_options']) ? $data['link']['localized_options'] : array();
    $element['#below'] = $data['below'] ? _site_map_menu_tree_output($data['below']) : $data['below'];
    $element['#original_link'] = $data['link'];
    // Index using the link's unique mlid.
    $build[$data['link']['mlid']] = $element;
  }
  if ($build) {
    // Make sure drupal_render() does not re-order the links.
    $build['#sorted'] = TRUE;
    // Add the theme wrapper for outer markup.
    // Allow menu-specific theme overrides.
    $build['#theme_wrappers'][] = 'site_map_menu_tree__' . strtr($data['link']['menu_name'], '-', '_');
  }

  return $build;
}
